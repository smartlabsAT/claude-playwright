# {{PROJECT_NAME}} - Enterprise Claude-Playwright Toolkit (Phase 1.6)

## üö® CRITICAL DEVELOPMENT RULES
1. **ALWAYS** check existing implementations before writing new code
2. **NEVER** duplicate existing functionality - extend or reuse
3. **ALWAYS** extend BasePage/BaseComponent for new objects
4. **MANDATORY** use helper functions instead of code duplication
5. **REQUIRED** follow enterprise patterns and best practices
6. **CRITICAL** use real browser sessions for authenticated testing

## üèóÔ∏è Enterprise Architecture (Token-Optimized)
```
src/
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ base/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BasePage.ts           # Core page functionality - EXTEND THIS
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BaseComponent.ts      # Reusable UI components
‚îÇ   ‚îî‚îÄ‚îÄ components/               # Specific component implementations
‚îú‚îÄ‚îÄ fixtures/
‚îÇ   ‚îú‚îÄ‚îÄ AuthFixture.ts           # Authentication management
‚îÇ   ‚îî‚îÄ‚îÄ BaseFixture.ts           # Common test fixtures
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ DataGenerator.ts         # Test data creation
‚îÇ   ‚îú‚îÄ‚îÄ ApiHelpers.ts            # API integration utilities
‚îÇ   ‚îî‚îÄ‚îÄ TestHelpers.ts           # Generic test utilities
‚îî‚îÄ‚îÄ tests/                       # Organized test suites
```

## üìã Enterprise Tools & Commands (Phase 1.6)

### Real Browser Session Management
```bash
# Capture production-ready sessions
claude-playwright session save prod-admin --url https://app.enterprise.com/admin
claude-playwright session save staging-user --url https://staging.enterprise.com

# Environment-specific sessions
claude-playwright session list
claude-playwright session clear  # Remove expired sessions
```

### Advanced Profile Management
```bash
# Setup enterprise profiles
claude-playwright profile setup
claude-playwright profile create enterprise-desktop --role enterprise_admin --viewport 1920x1080
claude-playwright profile create mobile-ios --role mobile_user --viewport 375x812

# Environment-specific profiles
claude-playwright profile list
```

### Enterprise Code Generation
```bash
# Generate enterprise-grade components
claude-playwright scaffold page DashboardPage
claude-playwright scaffold test admin-workflow
claude-playwright scaffold fixture AuthFixture

# Generate component libraries
claude-playwright scaffold component NavigationComponent
```

## üîí Enterprise Authentication Patterns
```typescript
// Using captured enterprise sessions
import { AuthFixture } from '../fixtures/AuthFixture';
import { SessionManager } from 'claude-playwright';

test.describe('Enterprise Admin Tests', () => {
  test('admin dashboard access', async ({ browser }) => {
    const sessionManager = new SessionManager();
    const adminSession = await sessionManager.loadSession('prod-admin');
    
    const context = await browser.newContext({
      storageState: adminSession,
      viewport: { width: 1920, height: 1080 }
    });
    
    const page = await context.newPage();
    const auth = new AuthFixture(page);
    await auth.expectUserRole('admin');
    
    // Test admin-specific functionality
    await page.goto('/admin/dashboard');
    await auth.expectAdminPanelVisible();
  });
});
```

## üéØ Component-Based Enterprise Testing
```typescript
// Generated by scaffold system
import { BaseComponent } from '../pages/base/BaseComponent';

export class NavigationComponent extends BaseComponent {
  private readonly menuButton = '[data-testid="enterprise-menu-toggle"]';
  private readonly adminLinks = '[data-testid="admin-nav-item"]';
  private readonly userProfile = '[data-testid="user-profile-dropdown"]';
  
  async openAdminPanel(): Promise<void> {
    await this.clickAndWait(this.menuButton);
    await this.expectElementVisible(this.adminLinks);
    await this.clickByText(this.adminLinks, 'Admin Panel');
  }
  
  async switchEnvironment(env: 'dev' | 'staging' | 'prod'): Promise<void> {
    await this.clickAndWait(this.userProfile);
    await this.selectOption('[data-testid="environment-selector"]', env);
    await this.waitForNavigation();
  }
}
```

## üìä Enterprise Data Management
```typescript
// Generated data utilities
import { DataGenerator } from '../utils/DataGenerator';
import { SessionManager } from 'claude-playwright';

test('enterprise user creation flow', async ({ browser }) => {
  // Load enterprise admin session
  const sessionManager = new SessionManager();
  const adminContext = await browser.newContext({
    storageState: await sessionManager.loadSession('enterprise-admin')
  });
  
  const userData = DataGenerator.createEnterpriseUser({
    role: 'department_manager',
    department: 'finance',
    permissions: ['view_reports', 'manage_team'],
    environment: 'production'
  });
  
  // Use generated data for consistent enterprise testing
  const page = await adminContext.newPage();
  await userPage.createEnterpriseUser(userData);
});
```

## üöÄ CI/CD Enterprise Integration
```yaml
# .github/workflows/enterprise-tests.yml (Generated)
name: Enterprise E2E Tests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging, production]
        profile: [desktop, mobile, tablet]
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Claude-Playwright Enterprise
        run: |
          npm install -g claude-playwright
          claude-playwright profile setup
          
      - name: Run Enterprise Tests
        run: npm run test:${{ matrix.environment }} -- --profile=${{ matrix.profile }}
        env:
          ENTERPRISE_SESSION_TOKEN: ${{ secrets.ENTERPRISE_SESSION_TOKEN }}
```

## üîß Enterprise Configuration Management
```typescript
// Environment-specific configurations (Generated)
export const ENTERPRISE_CONFIG = {
  environments: {
    development: { 
      baseUrl: 'http://localhost:3000',
      apiUrl: 'http://localhost:8000/api'
    },
    staging: { 
      baseUrl: 'https://staging.enterprise.com',
      apiUrl: 'https://api-staging.enterprise.com'
    },
    production: { 
      baseUrl: 'https://app.enterprise.com',
      apiUrl: 'https://api.enterprise.com'
    }
  },
  auth: {
    adminUsers: JSON.parse(process.env.ENTERPRISE_ADMIN_USERS || '[]'),
    testUsers: JSON.parse(process.env.ENTERPRISE_TEST_USERS || '[]'),
    serviceAccounts: JSON.parse(process.env.ENTERPRISE_SERVICE_ACCOUNTS || '[]')
  },
  features: {
    enableMultiTenant: process.env.ENABLE_MULTI_TENANT === 'true',
    enableSSOIntegration: process.env.ENABLE_SSO === 'true',
    enableAuditLogging: process.env.ENABLE_AUDIT_LOGS === 'true'
  }
};
```

## üé≠ Multi-Environment Session Strategy
```typescript
// Enterprise session management
class EnterpriseSessionManager {
  private sessionManager = new SessionManager();
  private profileManager = new BrowserProfileManager();
  
  async getEnvironmentSession(env: string, role: string): Promise<any> {
    const sessionName = `${env}-${role}`;
    
    try {
      return await this.sessionManager.loadSession(sessionName);
    } catch (error) {
      console.log(`‚ö†Ô∏è Session ${sessionName} not found or expired`);
      console.log(`Run: claude-playwright session save ${sessionName}`);
      throw error;
    }
  }
  
  async switchToProfile(profileName: string, context: BrowserContext): Promise<void> {
    const profile = await this.profileManager.loadProfile(profileName);
    
    // Apply profile settings to existing context
    await context.setDefaultTimeout(profile.settings.timeout || 30000);
    await context.setDefaultNavigationTimeout(profile.settings.navigationTimeout || 30000);
    
    console.log(`‚úÖ Switched to ${profileName} profile`);
  }
}
```

## üìà Enterprise Quality Standards

### Performance Requirements
- Page load times < 2s (desktop), < 3s (mobile)
- API response times < 500ms (staging), < 200ms (production)
- Test execution time < 10 minutes (full suite)

### Security Requirements
- All authentication via captured enterprise sessions
- Session rotation every 8 hours
- Multi-factor authentication support
- Role-based access control validation

### Compliance Requirements
- WCAG 2.1 AA accessibility compliance
- GDPR data handling validation
- SOC 2 audit trail maintenance
- PCI DSS payment flow testing

## üîç Enterprise Monitoring & Analytics
```typescript
// Performance tracking (Generated)
class EnterpriseMetrics {
  static async trackPagePerformance(page: Page): Promise<void> {
    const metrics = await page.evaluate(() => {
      const navigation = performance.getEntriesByType('navigation')[0];
      return {
        loadTime: navigation.loadEventEnd - navigation.loadEventStart,
        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
        firstContentfulPaint: performance.getEntriesByName('first-contentful-paint')[0]?.startTime
      };
    });
    
    // Enterprise thresholds
    expect(metrics.loadTime).toBeLessThan(2000); // 2s max
    expect(metrics.domContentLoaded).toBeLessThan(1000); // 1s max
  }
  
  static async validateEnterpriseCompliance(page: Page): Promise<void> {
    // Check for enterprise compliance markers
    await expect(page.locator('[data-compliance="gdpr-notice"]')).toBeVisible();
    await expect(page.locator('[data-security="ssl-indicator"]')).toBeVisible();
  }
}
```

## üöÄ Enterprise Development Workflow

### 1. Environment Setup
```bash
# One-time enterprise setup
claude-playwright profile setup
claude-playwright profile create enterprise-admin --role admin --viewport 1920x1080
claude-playwright profile create mobile-executive --role executive --viewport 375x812
```

### 2. Session Capture (Per Environment)
```bash
# Capture sessions for each environment
claude-playwright session save dev-admin --url http://localhost:3000/admin
claude-playwright session save staging-admin --url https://staging.enterprise.com/admin
claude-playwright session save prod-readonly --url https://app.enterprise.com (read-only testing)
```

### 3. Code Generation
```bash
# Generate enterprise components
claude-playwright scaffold page AdminDashboard
claude-playwright scaffold component ReportsWidget
claude-playwright scaffold fixture MultiTenantAuth
claude-playwright scaffold test compliance-audit
```

### 4. Automated Testing Pipeline
```typescript
// Complete enterprise test example
import { test } from '@playwright/test';
import { EnterpriseSessionManager } from '../utils/EnterpriseSessionManager';
import { AdminDashboard } from '../pages/AdminDashboard';
import { ReportsWidget } from '../components/ReportsWidget';

test('enterprise admin workflow', async ({ browser }) => {
  const sessionMgr = new EnterpriseSessionManager();
  
  // Load enterprise admin session
  const adminSession = await sessionMgr.getEnvironmentSession('staging', 'admin');
  const context = await browser.newContext({ storageState: adminSession });
  const page = await context.newPage();
  
  // Use generated page objects
  const dashboard = new AdminDashboard(page);
  await dashboard.goto();
  await dashboard.expectAdminPanelVisible();
  
  // Test enterprise components
  const reportsWidget = new ReportsWidget(page);
  await reportsWidget.generateComplianceReport();
  await reportsWidget.expectReportGenerated();
  
  // Validate enterprise compliance
  await EnterpriseMetrics.validateEnterpriseCompliance(page);
});
```

## üìä Session Management Dashboard
```bash
# Enterprise session overview
claude-playwright session list | grep -E "(prod|staging|dev)"

# Profile overview
claude-playwright profile list | grep -E "(admin|executive|manager)"

# Quick health check
claude-playwright session clear && echo "Cleaned expired sessions"
```