# {{PROJECT_NAME}} - Claude-Playwright Toolkit

## 🚨 CRITICAL RULES - MUST FOLLOW
1. **ALWAYS** check existing implementations before writing new code
2. **NEVER** duplicate existing functionality - extend or reuse
3. **ALWAYS** extend BasePage for new Page Objects
4. **MANDATORY** use helper functions instead of code duplication
5. **REQUIRED** use real browser sessions for authenticated testing

## 🏗️ Project Architecture (Optimized for Token Usage)
```
src/
├── pages/base/BasePage.ts          # Core page functionality - EXTEND THIS
├── tests/                          # Test files
├── fixtures/                       # Authentication fixtures
└── utils/                          # Helper utilities
```

## 📋 Available Tools & Commands

### Session Management (Real Browser Sessions)
```bash
# Capture authenticated session (opens real browser)
claude-playwright session save admin-session

# List all sessions with status
claude-playwright session list

# Use in tests (automatic loading)
```

### Profile Management
```bash
# Setup default profiles (admin, user, guest, mobile)  
claude-playwright profile setup

# Create custom profile
claude-playwright profile create tablet --role tablet_user
```

### Code Generation
```bash
# Generate Page Object
claude-playwright scaffold page LoginPage

# Generate test file
claude-playwright scaffold test auth-flow

# Generate fixture
claude-playwright scaffold fixture AuthFixture
```

## 🎯 Optimized Page Object Pattern
```typescript
// Generated by: claude-playwright scaffold page LoginPage
import { BasePage } from '../pages/base/BasePage';

export class LoginPage extends BasePage {
  // Locators - stable data-testid selectors
  private readonly emailInput = '[data-testid="email"]';
  private readonly passwordInput = '[data-testid="password"]';
  private readonly submitButton = '[data-testid="login-submit"]';
  
  async login(email: string, password: string) {
    await this.fillForm({
      [this.emailInput]: email,
      [this.passwordInput]: password
    });
    await this.clickAndWait(this.submitButton);
  }
}
```

## 🧪 Authenticated Testing Pattern
```typescript
// Using real captured sessions
import { SessionManager } from 'claude-playwright';

test('authenticated test', async ({ browser }) => {
  const sessionManager = new SessionManager();
  const storageState = await sessionManager.loadSession('admin-session');
  
  const context = await browser.newContext({ storageState });
  const page = await context.newPage();
  
  // User is now authenticated!
  await page.goto('/dashboard');
});
```

## 🔄 Efficient Development Workflow

### 1. Session Capture (One-time)
```bash
claude-playwright session save my-session --url https://your-app.com/login
# Login manually, press ENTER to save
```

### 2. Profile Setup (One-time)  
```bash
claude-playwright profile setup
```

### 3. Generate Code
```bash
# Generate what you need
claude-playwright scaffold page YourPage
claude-playwright scaffold test your-feature
```

### 4. Write Tests Using Generated Components
```typescript
import { YourPage } from './pages/YourPage';
import { SessionManager } from 'claude-playwright';

test('feature test', async ({ browser }) => {
  // Load session (8-hour cache)
  const sessionManager = new SessionManager();
  const storageState = await sessionManager.loadSession('my-session');
  
  const context = await browser.newContext({ storageState });
  const page = await context.newPage();
  
  const yourPage = new YourPage(page);
  await yourPage.goto();
  await yourPage.performAction();
});
```

## 🎭 Profile-Based Testing
```typescript
import { BrowserProfileManager } from 'claude-playwright';

test('mobile test', async ({ browser }) => {
  const profileManager = new BrowserProfileManager();
  const mobileProfile = await profileManager.loadProfile('mobile');
  
  const context = await browser.newContext({
    userAgent: mobileProfile.settings.userAgent,
    viewport: mobileProfile.settings.viewport,
    isMobile: true,
    hasTouch: true
  });
});
```

## 🔧 Configuration Files

### MCP Integration (Automatic)
- Server configured in `~/.claude/claude_desktop_config.json`
- Browser profiles in `./browser-profiles/`
- Sessions cached in `./playwright-sessions/` (8-hour expiry)

### Key Commands
- `npm test` - Run tests
- `npm run test:ui` - UI mode with debugging
- `npm run codegen` - Generate test code interactively

## 🎯 Best Practices for Token Efficiency

### 1. Use Generated Code
- `scaffold` commands create optimized code
- Follow established patterns
- Extend BasePage for consistency

### 2. Session Management
- Capture sessions once, reuse for 8 hours
- Use `session list` to check expiry
- Clear expired: `session clear`

### 3. Profile Usage
- Use appropriate profiles for test scenarios
- Mobile profile for responsive testing
- Admin profile for elevated permissions

### 4. Code Organization
- Keep Page Objects in `src/pages/`
- Use fixtures for authentication
- Centralize utilities in `src/utils/`

## 🚀 Quick Wins
1. **Setup**: `claude-playwright profile setup`
2. **Session**: Capture one authenticated session
3. **Generate**: Use scaffold for repetitive code
4. **Test**: Write tests using generated components
5. **Iterate**: Sessions auto-expire, profiles persist

## 📊 Session Status Check
```bash
# Quick status check
claude-playwright session list
claude-playwright profile list
```

---
**Toolkit Version**: Phase 1.6 Complete  
**Features**: Real browser sessions, profile management, code generation  
**Token Usage**: Optimized patterns, generated code, session caching